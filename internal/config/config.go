package config

import (
	"encoding/json"
	"fmt"
	"os"
)

// Config represents the main configuration structure
type Config struct {
	MSMPath     string      `json:"msm_path" mapstructure:"msm_path"`
	BuildConfig BuildConfig `json:"build_config" mapstructure:"build_config"`
	WorldConfig WorldConfig `json:"world_config" mapstructure:"world_config"`
	OpUsernames []string    `json:"op_usernames" mapstructure:"op_usernames"`
}

// BuildConfig represents build-related configuration
type BuildConfig struct {
	TempFolder       string `json:"temp_folder" mapstructure:"temp_folder"`
	MinecraftVersion string `json:"minecraft_version" mapstructure:"minecraft_version"`
	BuildToolsJar    string `json:"build_tools_jar" mapstructure:"build_tools_jar"`
	OutputFolder     string `json:"output_folder" mapstructure:"output_folder"`
}

// WorldConfig represents world-related configuration
type WorldConfig struct {
	ServerPropertiesTemplate string   `json:"server_properties_template" mapstructure:"server_properties_template"`
	WorldNames               []string `json:"world_names" mapstructure:"world_names"`
	JarGroup                 string   `json:"jargroup" mapstructure:"jargroup"`
	MinecraftVersion         string   `json:"minecraft_version" mapstructure:"minecraft_version"`
}

// DefaultConfig returns a default configuration
func DefaultConfig() *Config {
	return &Config{
		MSMPath: "/opt/msm",
		BuildConfig: BuildConfig{
			TempFolder:       "/tmp/spigot_build",
			MinecraftVersion: "latest",
			BuildToolsJar:    "BuildTools.jar",
			OutputFolder:     "./jars",
		},
		WorldConfig: WorldConfig{
			ServerPropertiesTemplate: "server.properties.template",
			WorldNames:               []string{"world1", "world2"},
			JarGroup:                 "spigot",
			MinecraftVersion:         "latest",
		},
		OpUsernames: []string{"admin"},
	}
}

// DefaultServerProperties returns default server.properties template content
func DefaultServerProperties() string {
	return `#Minecraft server properties
#Generated by AUMC
enable-jmx-monitoring=false
rcon.port=25575
level-seed=
gamemode=survival
enable-command-block=false
enable-query=false
generator-settings={}
enforce-secure-profile=true
level-name=world
motd=A Minecraft Server
query.port=25565
pvp=true
generate-structures=true
max-chained-neighbor-updates=1000000
difficulty=easy
network-compression-threshold=256
max-tick-time=60000
require-resource-pack=false
use-native-transport=true
max-players=20
online-mode=true
enable-status=true
allow-flight=false
initial-disabled-packs=
broadcast-rcon-to-ops=true
view-distance=10
resource-pack-id=
server-ip=
allow-nether=true
server-port=25565
enable-rcon=false
sync-chunk-writes=true
op-permission-level=4
prevent-proxy-connections=false
hide-online-players=false
resource-pack=
entity-broadcast-range-percentage=100
simulation-distance=10
rcon.password=
player-idle-timeout=0
debug=false
force-gamemode=false
rate-limit=0
hardcore=false
white-list=false
broadcast-console-to-ops=true
spawn-npcs=true
spawn-animals=true
function-permission-level=2
initial-enabled-packs=vanilla
level-type=minecraft\:normal
text-filtering-config=
spawn-monsters=true
enforce-whitelist=false
spawn-protection=16
resource-pack-sha1=
max-world-size=29999984`
}

// SaveDefaultFiles creates default config.json and server.properties.template files
func SaveDefaultFiles() error {
	// Create default config file
	defaultConfig := DefaultConfig()
	configData, err := json.MarshalIndent(defaultConfig, "", "  ")
	if err != nil {
		return fmt.Errorf("failed to marshal default config: %w", err)
	}

	if err := os.WriteFile("config.json", configData, 0644); err != nil {
		return fmt.Errorf("failed to write config.json: %w", err)
	}

	// Create default server properties template
	serverProps := DefaultServerProperties()
	if err := os.WriteFile("server.properties.template", []byte(serverProps), 0644); err != nil {
		return fmt.Errorf("failed to write server.properties.template: %w", err)
	}

	return nil
}